// Generated by gencpp from file acri_localisation/controlFromNUC.msg
// DO NOT EDIT!


#ifndef ACRI_LOCALISATION_MESSAGE_CONTROLFROMNUC_H
#define ACRI_LOCALISATION_MESSAGE_CONTROLFROMNUC_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <acri_localisation/railLine.h>
#include <geometry_msgs/Pose2D.h>
#include <std_msgs/UInt32.h>
#include <std_msgs/Bool.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>

namespace acri_localisation
{
template <class ContainerAllocator>
struct controlFromNUC_
{
  typedef controlFromNUC_<ContainerAllocator> Type;

  controlFromNUC_()
    : header()
    , midline()
    , pose2D()
    , mode()
    , inrange()
    , voltage24()
    , voltage48()  {
    }
  controlFromNUC_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , midline(_alloc)
    , pose2D(_alloc)
    , mode(_alloc)
    , inrange(_alloc)
    , voltage24(_alloc)
    , voltage48(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::acri_localisation::railLine_<ContainerAllocator>  _midline_type;
  _midline_type midline;

   typedef  ::geometry_msgs::Pose2D_<ContainerAllocator>  _pose2D_type;
  _pose2D_type pose2D;

   typedef  ::std_msgs::UInt32_<ContainerAllocator>  _mode_type;
  _mode_type mode;

   typedef  ::std_msgs::Bool_<ContainerAllocator>  _inrange_type;
  _inrange_type inrange;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _voltage24_type;
  _voltage24_type voltage24;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _voltage48_type;
  _voltage48_type voltage48;





  typedef boost::shared_ptr< ::acri_localisation::controlFromNUC_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::acri_localisation::controlFromNUC_<ContainerAllocator> const> ConstPtr;

}; // struct controlFromNUC_

typedef ::acri_localisation::controlFromNUC_<std::allocator<void> > controlFromNUC;

typedef boost::shared_ptr< ::acri_localisation::controlFromNUC > controlFromNUCPtr;
typedef boost::shared_ptr< ::acri_localisation::controlFromNUC const> controlFromNUCConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::acri_localisation::controlFromNUC_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::acri_localisation::controlFromNUC_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::acri_localisation::controlFromNUC_<ContainerAllocator1> & lhs, const ::acri_localisation::controlFromNUC_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.midline == rhs.midline &&
    lhs.pose2D == rhs.pose2D &&
    lhs.mode == rhs.mode &&
    lhs.inrange == rhs.inrange &&
    lhs.voltage24 == rhs.voltage24 &&
    lhs.voltage48 == rhs.voltage48;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::acri_localisation::controlFromNUC_<ContainerAllocator1> & lhs, const ::acri_localisation::controlFromNUC_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace acri_localisation

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::acri_localisation::controlFromNUC_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::acri_localisation::controlFromNUC_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::acri_localisation::controlFromNUC_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::acri_localisation::controlFromNUC_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::acri_localisation::controlFromNUC_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::acri_localisation::controlFromNUC_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::acri_localisation::controlFromNUC_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d79800d54a13d23f4d7ba0216eb0f324";
  }

  static const char* value(const ::acri_localisation::controlFromNUC_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd79800d54a13d23fULL;
  static const uint64_t static_value2 = 0x4d7ba0216eb0f324ULL;
};

template<class ContainerAllocator>
struct DataType< ::acri_localisation::controlFromNUC_<ContainerAllocator> >
{
  static const char* value()
  {
    return "acri_localisation/controlFromNUC";
  }

  static const char* value(const ::acri_localisation::controlFromNUC_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::acri_localisation::controlFromNUC_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# header: sequence and time-step id\n"
"# mid line: rail mid_line comprising of two 3D points\n"
"# pose2D: robot pose comprising of [x,y,theta] \n"
"# mode: desired driving mode: 0 - manual, 1 - deploying, 2 - deployed 3 - isolation deploying 4- isolation deployed 5- fault\n"
"# inrange: rail is within valid range of vehicle to go into autonomous mode\n"
"# voltage24: voltage of 24V battery\n"
"# voltage48: voltage of 48V battery\n"
"\n"
"std_msgs/Header header\n"
"acri_localisation/railLine midline\n"
"geometry_msgs/Pose2D pose2D\n"
"std_msgs/UInt32 mode\n"
"std_msgs/Bool inrange\n"
"std_msgs/Float32 voltage24\n"
"std_msgs/Float32 voltage48\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: acri_localisation/railLine\n"
"geometry_msgs/Point point1\n"
"geometry_msgs/Point point2\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose2D\n"
"# Deprecated\n"
"# Please use the full 3D pose.\n"
"\n"
"# In general our recommendation is to use a full 3D representation of everything and for 2D specific applications make the appropriate projections into the plane for their calculations but optimally will preserve the 3D information during processing.\n"
"\n"
"# If we have parallel copies of 2D datatypes every UI and other pipeline will end up needing to have dual interfaces to plot everything. And you will end up with not being able to use 3D tools for 2D use cases even if they're completely valid, as you'd have to reimplement it with different inputs and outputs. It's not particularly hard to plot the 2D pose or compute the yaw error for the Pose message and there are already tools and libraries that can do this for you.\n"
"\n"
"\n"
"# This expresses a position and orientation on a 2D manifold.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 theta\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/UInt32\n"
"uint32 data\n"
"================================================================================\n"
"MSG: std_msgs/Bool\n"
"bool data\n"
"================================================================================\n"
"MSG: std_msgs/Float32\n"
"float32 data\n"
;
  }

  static const char* value(const ::acri_localisation::controlFromNUC_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::acri_localisation::controlFromNUC_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.midline);
      stream.next(m.pose2D);
      stream.next(m.mode);
      stream.next(m.inrange);
      stream.next(m.voltage24);
      stream.next(m.voltage48);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct controlFromNUC_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::acri_localisation::controlFromNUC_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::acri_localisation::controlFromNUC_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "midline: ";
    s << std::endl;
    Printer< ::acri_localisation::railLine_<ContainerAllocator> >::stream(s, indent + "  ", v.midline);
    s << indent << "pose2D: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose2D_<ContainerAllocator> >::stream(s, indent + "  ", v.pose2D);
    s << indent << "mode: ";
    s << std::endl;
    Printer< ::std_msgs::UInt32_<ContainerAllocator> >::stream(s, indent + "  ", v.mode);
    s << indent << "inrange: ";
    s << std::endl;
    Printer< ::std_msgs::Bool_<ContainerAllocator> >::stream(s, indent + "  ", v.inrange);
    s << indent << "voltage24: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.voltage24);
    s << indent << "voltage48: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.voltage48);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ACRI_LOCALISATION_MESSAGE_CONTROLFROMNUC_H
