// Generated by gencpp from file acri_localisation/controlToNUC.msg
// DO NOT EDIT!


#ifndef ACRI_LOCALISATION_MESSAGE_CONTROLTONUC_H
#define ACRI_LOCALISATION_MESSAGE_CONTROLTONUC_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <std_msgs/UInt32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>

namespace acri_localisation
{
template <class ContainerAllocator>
struct controlToNUC_
{
  typedef controlToNUC_<ContainerAllocator> Type;

  controlToNUC_()
    : header()
    , mode()
    , voltage24()
    , voltage48()  {
    }
  controlToNUC_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , mode(_alloc)
    , voltage24(_alloc)
    , voltage48(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::std_msgs::UInt32_<ContainerAllocator>  _mode_type;
  _mode_type mode;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _voltage24_type;
  _voltage24_type voltage24;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _voltage48_type;
  _voltage48_type voltage48;





  typedef boost::shared_ptr< ::acri_localisation::controlToNUC_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::acri_localisation::controlToNUC_<ContainerAllocator> const> ConstPtr;

}; // struct controlToNUC_

typedef ::acri_localisation::controlToNUC_<std::allocator<void> > controlToNUC;

typedef boost::shared_ptr< ::acri_localisation::controlToNUC > controlToNUCPtr;
typedef boost::shared_ptr< ::acri_localisation::controlToNUC const> controlToNUCConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::acri_localisation::controlToNUC_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::acri_localisation::controlToNUC_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::acri_localisation::controlToNUC_<ContainerAllocator1> & lhs, const ::acri_localisation::controlToNUC_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.mode == rhs.mode &&
    lhs.voltage24 == rhs.voltage24 &&
    lhs.voltage48 == rhs.voltage48;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::acri_localisation::controlToNUC_<ContainerAllocator1> & lhs, const ::acri_localisation::controlToNUC_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace acri_localisation

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::acri_localisation::controlToNUC_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::acri_localisation::controlToNUC_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::acri_localisation::controlToNUC_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::acri_localisation::controlToNUC_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::acri_localisation::controlToNUC_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::acri_localisation::controlToNUC_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::acri_localisation::controlToNUC_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3fae9323d5973f4783a5e2f3a2ec3199";
  }

  static const char* value(const ::acri_localisation::controlToNUC_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3fae9323d5973f47ULL;
  static const uint64_t static_value2 = 0x83a5e2f3a2ec3199ULL;
};

template<class ContainerAllocator>
struct DataType< ::acri_localisation::controlToNUC_<ContainerAllocator> >
{
  static const char* value()
  {
    return "acri_localisation/controlToNUC";
  }

  static const char* value(const ::acri_localisation::controlToNUC_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::acri_localisation::controlToNUC_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# header: sequence and time-step id\n"
"# mode: desired driving mode: 0 - manual, 1 - deploying, 2 - deployed 3 - isolation deploying 4- isolation deployed 5- fault\n"
"# voltage24: voltage of 24V battery\n"
"# voltage48: voltage of 48V battery\n"
"std_msgs/Header header\n"
"std_msgs/UInt32 mode\n"
"std_msgs/Float32 voltage24\n"
"std_msgs/Float32 voltage48\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/UInt32\n"
"uint32 data\n"
"================================================================================\n"
"MSG: std_msgs/Float32\n"
"float32 data\n"
;
  }

  static const char* value(const ::acri_localisation::controlToNUC_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::acri_localisation::controlToNUC_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.mode);
      stream.next(m.voltage24);
      stream.next(m.voltage48);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct controlToNUC_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::acri_localisation::controlToNUC_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::acri_localisation::controlToNUC_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "mode: ";
    s << std::endl;
    Printer< ::std_msgs::UInt32_<ContainerAllocator> >::stream(s, indent + "  ", v.mode);
    s << indent << "voltage24: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.voltage24);
    s << indent << "voltage48: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.voltage48);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ACRI_LOCALISATION_MESSAGE_CONTROLTONUC_H
