// Generated by gencpp from file acri_localisation/railClosestPair.msg
// DO NOT EDIT!


#ifndef ACRI_LOCALISATION_MESSAGE_RAILCLOSESTPAIR_H
#define ACRI_LOCALISATION_MESSAGE_RAILCLOSESTPAIR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <acri_localisation/railLine.h>
#include <acri_localisation/railLine.h>
#include <acri_localisation/railLine.h>
#include <std_msgs/Bool.h>

namespace acri_localisation
{
template <class ContainerAllocator>
struct railClosestPair_
{
  typedef railClosestPair_<ContainerAllocator> Type;

  railClosestPair_()
    : header()
    , line1()
    , line2()
    , midline()
    , inrange()  {
    }
  railClosestPair_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , line1(_alloc)
    , line2(_alloc)
    , midline(_alloc)
    , inrange(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::acri_localisation::railLine_<ContainerAllocator>  _line1_type;
  _line1_type line1;

   typedef  ::acri_localisation::railLine_<ContainerAllocator>  _line2_type;
  _line2_type line2;

   typedef  ::acri_localisation::railLine_<ContainerAllocator>  _midline_type;
  _midline_type midline;

   typedef  ::std_msgs::Bool_<ContainerAllocator>  _inrange_type;
  _inrange_type inrange;





  typedef boost::shared_ptr< ::acri_localisation::railClosestPair_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::acri_localisation::railClosestPair_<ContainerAllocator> const> ConstPtr;

}; // struct railClosestPair_

typedef ::acri_localisation::railClosestPair_<std::allocator<void> > railClosestPair;

typedef boost::shared_ptr< ::acri_localisation::railClosestPair > railClosestPairPtr;
typedef boost::shared_ptr< ::acri_localisation::railClosestPair const> railClosestPairConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::acri_localisation::railClosestPair_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::acri_localisation::railClosestPair_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::acri_localisation::railClosestPair_<ContainerAllocator1> & lhs, const ::acri_localisation::railClosestPair_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.line1 == rhs.line1 &&
    lhs.line2 == rhs.line2 &&
    lhs.midline == rhs.midline &&
    lhs.inrange == rhs.inrange;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::acri_localisation::railClosestPair_<ContainerAllocator1> & lhs, const ::acri_localisation::railClosestPair_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace acri_localisation

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::acri_localisation::railClosestPair_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::acri_localisation::railClosestPair_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::acri_localisation::railClosestPair_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::acri_localisation::railClosestPair_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::acri_localisation::railClosestPair_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::acri_localisation::railClosestPair_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::acri_localisation::railClosestPair_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1f8485efdc65afe9c5ad5817e1a262cf";
  }

  static const char* value(const ::acri_localisation::railClosestPair_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1f8485efdc65afe9ULL;
  static const uint64_t static_value2 = 0xc5ad5817e1a262cfULL;
};

template<class ContainerAllocator>
struct DataType< ::acri_localisation::railClosestPair_<ContainerAllocator> >
{
  static const char* value()
  {
    return "acri_localisation/railClosestPair";
  }

  static const char* value(const ::acri_localisation::railClosestPair_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::acri_localisation::railClosestPair_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"acri_localisation/railLine line1\n"
"acri_localisation/railLine line2\n"
"acri_localisation/railLine midline\n"
"std_msgs/Bool inrange\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: acri_localisation/railLine\n"
"geometry_msgs/Point point1\n"
"geometry_msgs/Point point2\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Bool\n"
"bool data\n"
;
  }

  static const char* value(const ::acri_localisation::railClosestPair_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::acri_localisation::railClosestPair_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.line1);
      stream.next(m.line2);
      stream.next(m.midline);
      stream.next(m.inrange);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct railClosestPair_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::acri_localisation::railClosestPair_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::acri_localisation::railClosestPair_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "line1: ";
    s << std::endl;
    Printer< ::acri_localisation::railLine_<ContainerAllocator> >::stream(s, indent + "  ", v.line1);
    s << indent << "line2: ";
    s << std::endl;
    Printer< ::acri_localisation::railLine_<ContainerAllocator> >::stream(s, indent + "  ", v.line2);
    s << indent << "midline: ";
    s << std::endl;
    Printer< ::acri_localisation::railLine_<ContainerAllocator> >::stream(s, indent + "  ", v.midline);
    s << indent << "inrange: ";
    s << std::endl;
    Printer< ::std_msgs::Bool_<ContainerAllocator> >::stream(s, indent + "  ", v.inrange);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ACRI_LOCALISATION_MESSAGE_RAILCLOSESTPAIR_H
